//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from grammars/BrainfuckOptimized.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class BrainfuckOptimizedLexer : Lexer {
	public const int
		NEXT=1, PREV=2, ADD=3, SUB=4, PRINT=5, READ=6, LOOP=7, ELOOP=8, WS=9;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NEXT", "PREV", "ADD", "SUB", "PRINT", "READ", "LOOP", "ELOOP", "WS"
	};


	public BrainfuckOptimizedLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'>'", "'<'", "'+'", "'-'", "'.'", "','", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEXT", "PREV", "ADD", "SUB", "PRINT", "READ", "LOOP", "ELOOP", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BrainfuckOptimized.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\v,");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x3\x2\x3\x2\x3\x3\x3\x3");
		sb.Append("\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3");
		sb.Append("\t\x3\t\x3\n\x6\n\'\n\n\r\n\xE\n(\x3\n\x3\n\x2\x2\v\x3\x3\x5");
		sb.Append("\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x3\x2\x3\x4\x2\v\f\xF");
		sb.Append("\xF,\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2");
		sb.Append("\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2");
		sb.Append("\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x3\x15\x3\x2\x2");
		sb.Append("\x2\x5\x17\x3\x2\x2\x2\a\x19\x3\x2\x2\x2\t\x1B\x3\x2\x2\x2\v");
		sb.Append("\x1D\x3\x2\x2\x2\r\x1F\x3\x2\x2\x2\xF!\x3\x2\x2\x2\x11#\x3\x2");
		sb.Append("\x2\x2\x13&\x3\x2\x2\x2\x15\x16\a@\x2\x2\x16\x4\x3\x2\x2\x2");
		sb.Append("\x17\x18\a>\x2\x2\x18\x6\x3\x2\x2\x2\x19\x1A\a-\x2\x2\x1A\b");
		sb.Append("\x3\x2\x2\x2\x1B\x1C\a/\x2\x2\x1C\n\x3\x2\x2\x2\x1D\x1E\a\x30");
		sb.Append("\x2\x2\x1E\f\x3\x2\x2\x2\x1F \a.\x2\x2 \xE\x3\x2\x2\x2!\"\a");
		sb.Append("]\x2\x2\"\x10\x3\x2\x2\x2#$\a_\x2\x2$\x12\x3\x2\x2\x2%\'\t\x2");
		sb.Append("\x2\x2&%\x3\x2\x2\x2\'(\x3\x2\x2\x2(&\x3\x2\x2\x2()\x3\x2\x2");
		sb.Append("\x2)*\x3\x2\x2\x2*+\b\n\x2\x2+\x14\x3\x2\x2\x2\x4\x2(\x3\b\x2");
		sb.Append("\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
