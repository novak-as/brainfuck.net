//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from grammars/Brainfuck.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class BrainfuckParser : Parser {
	public const int
		NEXT=1, PREV=2, ADD=3, SUB=4, PRINT=5, READ=6, LOOP=7, ELOOP=8, WS=9;
	public const int
		RULE_analyze = 0, RULE_expr = 1, RULE_next = 2, RULE_prev = 3, RULE_add = 4, 
		RULE_sub = 5, RULE_print = 6, RULE_read = 7, RULE_sloop = 8, RULE_eloop = 9, 
		RULE_loop = 10;
	public static readonly string[] ruleNames = {
		"analyze", "expr", "next", "prev", "add", "sub", "print", "read", "sloop", 
		"eloop", "loop"
	};

	private static readonly string[] _LiteralNames = {
		null, "'>'", "'<'", "'+'", "'-'", "'.'", "','", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEXT", "PREV", "ADD", "SUB", "PRINT", "READ", "LOOP", "ELOOP", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Brainfuck.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public BrainfuckParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class AnalyzeContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(BrainfuckParser.Eof, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AnalyzeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyze; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.EnterAnalyze(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.ExitAnalyze(this);
		}
	}

	[RuleVersion(0)]
	public AnalyzeContext analyze() {
		AnalyzeContext _localctx = new AnalyzeContext(Context, State);
		EnterRule(_localctx, 0, RULE_analyze);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEXT) | (1L << PREV) | (1L << ADD) | (1L << SUB) | (1L << PRINT) | (1L << READ) | (1L << LOOP))) != 0)) {
				{
				{
				State = 22; expr();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 28; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public NextContext next() {
			return GetRuleContext<NextContext>(0);
		}
		public PrevContext prev() {
			return GetRuleContext<PrevContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public SubContext sub() {
			return GetRuleContext<SubContext>(0);
		}
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			switch (TokenStream.La(1)) {
			case NEXT:
				{
				State = 30; next();
				}
				break;
			case PREV:
				{
				State = 31; prev();
				}
				break;
			case ADD:
				{
				State = 32; add();
				}
				break;
			case SUB:
				{
				State = 33; sub();
				}
				break;
			case PRINT:
				{
				State = 34; print();
				}
				break;
			case READ:
				{
				State = 35; read();
				}
				break;
			case LOOP:
				{
				State = 36; loop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NextContext : ParserRuleContext {
		public ITerminalNode NEXT() { return GetToken(BrainfuckParser.NEXT, 0); }
		public NextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_next; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.EnterNext(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.ExitNext(this);
		}
	}

	[RuleVersion(0)]
	public NextContext next() {
		NextContext _localctx = new NextContext(Context, State);
		EnterRule(_localctx, 4, RULE_next);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; Match(NEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrevContext : ParserRuleContext {
		public ITerminalNode PREV() { return GetToken(BrainfuckParser.PREV, 0); }
		public PrevContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prev; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.EnterPrev(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.ExitPrev(this);
		}
	}

	[RuleVersion(0)]
	public PrevContext prev() {
		PrevContext _localctx = new PrevContext(Context, State);
		EnterRule(_localctx, 6, RULE_prev);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(PREV);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(BrainfuckParser.ADD, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 8, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; Match(ADD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubContext : ParserRuleContext {
		public ITerminalNode SUB() { return GetToken(BrainfuckParser.SUB, 0); }
		public SubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
	}

	[RuleVersion(0)]
	public SubContext sub() {
		SubContext _localctx = new SubContext(Context, State);
		EnterRule(_localctx, 10, RULE_sub);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(BrainfuckParser.PRINT, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 12, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(PRINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadContext : ParserRuleContext {
		public ITerminalNode READ() { return GetToken(BrainfuckParser.READ, 0); }
		public ReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.EnterRead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.ExitRead(this);
		}
	}

	[RuleVersion(0)]
	public ReadContext read() {
		ReadContext _localctx = new ReadContext(Context, State);
		EnterRule(_localctx, 14, RULE_read);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(READ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SloopContext : ParserRuleContext {
		public ITerminalNode LOOP() { return GetToken(BrainfuckParser.LOOP, 0); }
		public SloopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sloop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.EnterSloop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.ExitSloop(this);
		}
	}

	[RuleVersion(0)]
	public SloopContext sloop() {
		SloopContext _localctx = new SloopContext(Context, State);
		EnterRule(_localctx, 16, RULE_sloop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(LOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EloopContext : ParserRuleContext {
		public ITerminalNode ELOOP() { return GetToken(BrainfuckParser.ELOOP, 0); }
		public EloopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eloop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.EnterEloop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.ExitEloop(this);
		}
	}

	[RuleVersion(0)]
	public EloopContext eloop() {
		EloopContext _localctx = new EloopContext(Context, State);
		EnterRule(_localctx, 18, RULE_eloop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(ELOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		public SloopContext sloop() {
			return GetRuleContext<SloopContext>(0);
		}
		public EloopContext eloop() {
			return GetRuleContext<EloopContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.EnterLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBrainfuckListener typedListener = listener as IBrainfuckListener;
			if (typedListener != null) typedListener.ExitLoop(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 20, RULE_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; sloop();
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEXT) | (1L << PREV) | (1L << ADD) | (1L << SUB) | (1L << PRINT) | (1L << READ) | (1L << LOOP))) != 0)) {
				{
				{
				State = 56; expr();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 62; eloop();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\v\x43");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\a\x2");
		sb.Append("\x1A\n\x2\f\x2\xE\x2\x1D\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3(\n\x3\x3\x4\x3\x4\x3\x5\x3\x5");
		sb.Append("\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3");
		sb.Append("\v\x3\f\x3\f\a\f<\n\f\f\f\xE\f?\v\f\x3\f\x3\f\x3\f\x2\x2\r\x2");
		sb.Append("\x4\x6\b\n\f\xE\x10\x12\x14\x16\x2\x2?\x2\x1B\x3\x2\x2\x2\x4");
		sb.Append("\'\x3\x2\x2\x2\x6)\x3\x2\x2\x2\b+\x3\x2\x2\x2\n-\x3\x2\x2\x2");
		sb.Append("\f/\x3\x2\x2\x2\xE\x31\x3\x2\x2\x2\x10\x33\x3\x2\x2\x2\x12\x35");
		sb.Append("\x3\x2\x2\x2\x14\x37\x3\x2\x2\x2\x16\x39\x3\x2\x2\x2\x18\x1A");
		sb.Append("\x5\x4\x3\x2\x19\x18\x3\x2\x2\x2\x1A\x1D\x3\x2\x2\x2\x1B\x19");
		sb.Append("\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x1E\x3\x2\x2\x2\x1D\x1B");
		sb.Append("\x3\x2\x2\x2\x1E\x1F\a\x2\x2\x3\x1F\x3\x3\x2\x2\x2 (\x5\x6\x4");
		sb.Append("\x2!(\x5\b\x5\x2\"(\x5\n\x6\x2#(\x5\f\a\x2$(\x5\xE\b\x2%(\x5");
		sb.Append("\x10\t\x2&(\x5\x16\f\x2\' \x3\x2\x2\x2\'!\x3\x2\x2\x2\'\"\x3");
		sb.Append("\x2\x2\x2\'#\x3\x2\x2\x2\'$\x3\x2\x2\x2\'%\x3\x2\x2\x2\'&\x3");
		sb.Append("\x2\x2\x2(\x5\x3\x2\x2\x2)*\a\x3\x2\x2*\a\x3\x2\x2\x2+,\a\x4");
		sb.Append("\x2\x2,\t\x3\x2\x2\x2-.\a\x5\x2\x2.\v\x3\x2\x2\x2/\x30\a\x6");
		sb.Append("\x2\x2\x30\r\x3\x2\x2\x2\x31\x32\a\a\x2\x2\x32\xF\x3\x2\x2\x2");
		sb.Append("\x33\x34\a\b\x2\x2\x34\x11\x3\x2\x2\x2\x35\x36\a\t\x2\x2\x36");
		sb.Append("\x13\x3\x2\x2\x2\x37\x38\a\n\x2\x2\x38\x15\x3\x2\x2\x2\x39=");
		sb.Append("\x5\x12\n\x2:<\x5\x4\x3\x2;:\x3\x2\x2\x2<?\x3\x2\x2\x2=;\x3");
		sb.Append("\x2\x2\x2=>\x3\x2\x2\x2>@\x3\x2\x2\x2?=\x3\x2\x2\x2@\x41\x5");
		sb.Append("\x14\v\x2\x41\x17\x3\x2\x2\x2\x5\x1B\'=");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
