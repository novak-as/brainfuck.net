//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from grammars/Brainfuck.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IBrainfuckListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class BrainfuckBaseListener : IBrainfuckListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="BrainfuckParser.analyze"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAnalyze([NotNull] BrainfuckParser.AnalyzeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BrainfuckParser.analyze"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAnalyze([NotNull] BrainfuckParser.AnalyzeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BrainfuckParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr([NotNull] BrainfuckParser.ExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BrainfuckParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr([NotNull] BrainfuckParser.ExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BrainfuckParser.next"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNext([NotNull] BrainfuckParser.NextContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BrainfuckParser.next"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNext([NotNull] BrainfuckParser.NextContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BrainfuckParser.prev"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrev([NotNull] BrainfuckParser.PrevContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BrainfuckParser.prev"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrev([NotNull] BrainfuckParser.PrevContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BrainfuckParser.add"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdd([NotNull] BrainfuckParser.AddContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BrainfuckParser.add"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdd([NotNull] BrainfuckParser.AddContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BrainfuckParser.sub"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSub([NotNull] BrainfuckParser.SubContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BrainfuckParser.sub"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSub([NotNull] BrainfuckParser.SubContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BrainfuckParser.print"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrint([NotNull] BrainfuckParser.PrintContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BrainfuckParser.print"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrint([NotNull] BrainfuckParser.PrintContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BrainfuckParser.read"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRead([NotNull] BrainfuckParser.ReadContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BrainfuckParser.read"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRead([NotNull] BrainfuckParser.ReadContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BrainfuckParser.sloop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSloop([NotNull] BrainfuckParser.SloopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BrainfuckParser.sloop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSloop([NotNull] BrainfuckParser.SloopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BrainfuckParser.eloop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEloop([NotNull] BrainfuckParser.EloopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BrainfuckParser.eloop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEloop([NotNull] BrainfuckParser.EloopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BrainfuckParser.loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLoop([NotNull] BrainfuckParser.LoopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BrainfuckParser.loop"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLoop([NotNull] BrainfuckParser.LoopContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
